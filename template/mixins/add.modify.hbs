/**
 * @fileOverview 新增修改混合配置
 * @author {{author}}
 * @date {{creationDate}}
 */
import rules from '../config/rules'
import ModelConfig from '../config/model'
{{#each columns}}
{{#each childrens}}
{{!-- 遍历子栏目,引入相关的字段配置文件 --}}
{{#not_null_array fields}}
import {{fieldsConfig}} from '../config/{{fileName}}'
{{/not_null_array}}
{{/each}}
{{/each}}
import FormFieldsRender from '@/fms/components/form-fields-render'
import FormFooter from '@/fms/components/form-footer'

export default {
  data () {
    return {
      loading: false,
      rules: rules(this),
      {{#if hasDialog}}
      dialogOption: {
        width: '1200px',
        show: false,
        title: '',
        view: ''
      },
      {{/if}}
      {{#each columns}}
      {{#each childrens}}
      {{!-- 遍历子栏目,生成相关fields --}}
      {{#not_null_array fields}}
      {{fieldsConfig}}: {{fieldsConfig}}(this),
      {{/not_null_array}}
      {{/each}}
      {{/each}}
      {{!-- 在弹出层内部不需要使用search-pager --}}
      {{!-- @since 1.0.1 --}}
      {{#unless inDialog}}
      searchPagerConfig: {
        option: {
          back: '{{router}}'
        }
      },
      {{/unless}}
      model: ModelConfig(this)
    }
  },
  components: {
    FormFieldsRender,
    FormFooter
  },
  {{!-- 如果在弹出层中不存在路由进入 --}}
  {{#unless inDialog}}
  /**
   * 路由进入之前清空验证规则
   */
  beforeRouteEnter(to, from, next) {
    next(vm => {
      vm.$refs.form.clearValidate()
    })
  },
  {{/unless}}
  methods: {
    {{#if hasDialog}}
    /**
     * 显示弹出窗
     * @param {String} view - 需要显示的组件
     * @param {String} title - 弹出窗标题
     * @param {String} width - 弹出层宽度
     */
    showDynamicDialog (view, title, width = '1200px') {
      Object.assign(this.dialogOption, {
        title: title,
        width: width,
        view: view,
        show: true
      })
    },
    /**
     * 关闭弹窗
     */
    closeDynamicDialog () {
      this.dialogOption = {
        show: false,
        view: null,
        title: '',
        width: '0px'
      }
    },
    {{/if}}
    /**
     * 表单提交之前的处理
     * @param {Function} callback - 表单验证成功之后的回调函数
     */
    beforeFormSubmit (callback) {
      this.$refs.form.validate(valid => {
        if (valid) {
          if (typeof callback === 'function') {
            callback()
          }
        } else {
          this.$rule.error(this, this.$refs.form)
        }
      })
    },
    /**
     * 新增时表单提交
     */
    addFormSubmit () {
      this.beforeFormSubmit(async () => {
        // 业务处理
      })
    },
    /**
     * 修改时表单提交
     */
    modifyFormSubmit () {
      this.beforeFormSubmit(async () => {
        // 业务处理
      })
    },
    /**
     * 返回主页面
     * @param {Boolean} refresh - 是否刷新主页面列表数据
     */
    {{#if inDialog}}
    back (refresh = false) {
      this.$emit('close', refresh)
    }
    {{!-- 如果没在弹出层内部,那么通过路由返回 --}}
    {{else}}
    back (refresh) {
      if (refresh) {
        this.$route.params.$refresh = true
      }
      this.$router.push('{{router}}')
    }
    {{/if}}
  }
}
